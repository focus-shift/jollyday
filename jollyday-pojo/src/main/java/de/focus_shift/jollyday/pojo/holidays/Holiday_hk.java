package de.focus_shift.jollyday.pojo.holidays;

import java.time.DayOfWeek;
import java.time.MonthDay;
import java.time.Year;
import java.time.chrono.Chronology;
import java.util.List;

import de.focus_shift.jollyday.core.HolidayType;
import de.focus_shift.jollyday.core.spi.ChristianHolidayType;
import de.focus_shift.jollyday.core.spi.With;
import de.focus_shift.jollyday.core.spi.YearCycle;
import de.focus_shift.jollyday.pojo.JavaChristianHoliday;
import de.focus_shift.jollyday.pojo.JavaConfiguration;
import de.focus_shift.jollyday.pojo.JavaFixed;
import de.focus_shift.jollyday.pojo.JavaHolidays;
import de.focus_shift.jollyday.pojo.JavaMovingCondition;

public class Holiday_hk {

  public static JavaConfiguration configuration;

  static {
    configuration = new JavaConfiguration(new JavaHolidays()
      .addFixed(new JavaFixed("FIRST_DAY_OF_JANUARY", HolidayType.OFFICIAL_HOLIDAY, null, null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(1, 1)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.PREVIOUS, DayOfWeek.of(6))), MonthDay.of(2, 18)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 19)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 20)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.PREVIOUS, DayOfWeek.of(6))), MonthDay.of(2, 7)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 8)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 9)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.PREVIOUS, DayOfWeek.of(6))), MonthDay.of(1, 26)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(1, 27)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(1, 28)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.PREVIOUS, DayOfWeek.of(6))), MonthDay.of(2, 14)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 15)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 16)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 3)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 4)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 5)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(1, 23)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(1, 24)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(1, 25)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 10)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 11)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 12)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(1, 31)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 1)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 2)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 19)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 20)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 21)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 8)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 9)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 10)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(1, 28)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(1, 29)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(1, 30)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 16)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 17)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 18)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 5)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 6)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 7)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(1, 25)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(1, 26)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(1, 27)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 12)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 13)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 14)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 1)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 2)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 3)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(1, 22)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(1, 23)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(1, 24)))
      .addFixed(new JavaFixed("LUNAR_NEW_YEARS_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(3))), MonthDay.of(2, 10)))
      .addFixed(new JavaFixed("SECOND_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(2, 11)))
      .addFixed(new JavaFixed("THIRD_DAY_OF_LUNAR_NEW_YEAR", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(2, 12)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, null, Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 5)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 4)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, null, MonthDay.of(4, 6)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 5)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 4)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 5)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 4)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 5)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 4)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 5)))
      .addFixed(new JavaFixed("CHING_MING_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 4)))
      .addFixed(new JavaFixed("LABOUR_DAY", HolidayType.OFFICIAL_HOLIDAY, null, null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 1)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 24)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 12)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 2)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 21)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 10)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 28)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 17)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 6)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 25)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 14)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 3)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 22)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 12)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(4, 30)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 19)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 8)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 26)))
      .addFixed(new JavaFixed("BIRTHDAY_OF_THE_BUDDHA", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 15)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 19)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 8)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 28)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 16)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 6)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 23)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 12)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 2)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 20)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 9)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(5, 30)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 18)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 7)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 25)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 14)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 3)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 22)))
      .addFixed(new JavaFixed("TUEN_NG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(6, 10)))
      .addFixed(new JavaFixed("HONG_KONG_SPECIAL_REGION", HolidayType.OFFICIAL_HOLIDAY, Year.of(1997), null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(7, 1)))
      .addFixed(new JavaFixed("70_ANNIVERSARY_VICTORY_CH_VS_JP", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, null, MonthDay.of(9, 3)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 26)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 15)))
      .addFixed(new JavaFixed("CHINESE_MID_AUTUMN_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, null, MonthDay.of(10, 3)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 23)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 13)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 1)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 20)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 9)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 28)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 16)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 5)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 25)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 14)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 2)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 22)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 11)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 30)))
      .addFixed(new JavaFixed("DAY_FOLLOWING_CHINESE_MID_AUTUMN", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(9, 18)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2007), Year.of(2007), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 19)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2008), Year.of(2008), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 7)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2009), Year.of(2009), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 26)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2010), Year.of(2010), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 16)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2011), Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 5)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 23)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), Year.of(2013), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 13)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2014), Year.of(2014), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 2)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 21)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2016), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 9)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2017), Year.of(2017), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 28)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2018), Year.of(2018), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 17)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2019), Year.of(2019), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 7)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2020), Year.of(2020), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 25)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 14)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), Year.of(2022), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 4)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2023), Year.of(2023), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 23)))
      .addFixed(new JavaFixed("CHUNG_YEUNG_FESTIVAL", HolidayType.OFFICIAL_HOLIDAY, Year.of(2024), Year.of(2024), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 11)))
      .addFixed(new JavaFixed("NATIONAL_DAY", HolidayType.OFFICIAL_HOLIDAY, null, Year.of(2011), YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 1)))
      .addFixed(new JavaFixed("NATIONAL_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2012), Year.of(2012), YearCycle.EVERY_YEAR, null, MonthDay.of(10, 2)))
      .addFixed(new JavaFixed("NATIONAL_DAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2013), null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(10, 1)))
      .addFixed(new JavaFixed("CHRISTMAS", HolidayType.OFFICIAL_HOLIDAY, null, null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(2))), MonthDay.of(12, 25)))
      .addFixed(new JavaFixed("FIRST_WEEKDAY_AFTER_CHRISTMAS", HolidayType.OFFICIAL_HOLIDAY, null, null, YearCycle.EVERY_YEAR, List.of(new JavaMovingCondition(DayOfWeek.of(7), With.NEXT, DayOfWeek.of(1))), MonthDay.of(12, 26)))
      .addChristianHoliday(new JavaChristianHoliday("christian.GOOD_FRIDAY", HolidayType.OFFICIAL_HOLIDAY, null, null, YearCycle.EVERY_YEAR, null, ChristianHolidayType.GOOD_FRIDAY, Chronology.of("ISO")))
      .addChristianHoliday(new JavaChristianHoliday("DAY_FOLLOWING_GOOD_FRIDAY", HolidayType.OFFICIAL_HOLIDAY, null, null, YearCycle.EVERY_YEAR, null, ChristianHolidayType.EASTER_SATURDAY, Chronology.of("ISO")))
      .addChristianHoliday(new JavaChristianHoliday("christian.EASTER_MONDAY", HolidayType.OFFICIAL_HOLIDAY, null, Year.of(2014), YearCycle.EVERY_YEAR, null, ChristianHolidayType.EASTER_MONDAY, Chronology.of("ISO")))
      .addChristianHoliday(new JavaChristianHoliday("DAY_FOLLOWING_EASTER_MONDAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2015), Year.of(2015), YearCycle.EVERY_YEAR, null, ChristianHolidayType.EASTER_TUESDAY, Chronology.of("ISO")))
      .addChristianHoliday(new JavaChristianHoliday("christian.EASTER_MONDAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2016), Year.of(2020), YearCycle.EVERY_YEAR, null, ChristianHolidayType.EASTER_MONDAY, Chronology.of("ISO")))
      .addChristianHoliday(new JavaChristianHoliday("DAY_FOLLOWING_EASTER_MONDAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2021), Year.of(2021), YearCycle.EVERY_YEAR, null, ChristianHolidayType.EASTER_TUESDAY, Chronology.of("ISO")))
      .addChristianHoliday(new JavaChristianHoliday("christian.EASTER_MONDAY", HolidayType.OFFICIAL_HOLIDAY, Year.of(2022), null, YearCycle.EVERY_YEAR, null, ChristianHolidayType.EASTER_MONDAY, Chronology.of("ISO")))
      , null, "hk", "Hong Kong");
  }
}
